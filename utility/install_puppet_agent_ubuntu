#!/bin/bash

## variables
##
## @HOST_FQDN, this needs match the result of running the 'hostnamectl' command
##     from the environment running the puppetserver / puppetmaster.
##
## @HOST_IP, address that corresponds to the puppetserver.
##
## Note: some of the below incomplete ip addresses, corresponds to the
##       xx.xx.xx.* pattern, where '*' is variable.
##
VAGRANT_IP='192.168.0.*'

## custom function
exists() { [[ -e $1 ]]; }

## enable nullglob
shopt -s nullglob

if exists /vagrant/.ssh/*_vagrant.private; then

    HOST_FQDN='foreman.sandbox.local'
    HOST_IP='192.168.0.10'

else

    ## local variables
    CORRECT_HOST='n'

    ## prompt host fqdn and ip
    while [ "${CORRECT_HOST,,}" != 'y' ] && \
        [ "${CORRECT_HOST,,}" != 'yes' ] && \
        [ "${CORRECT_HOST,,}" != 'true' ] && \
        [ "${CORRECT_HOST,,}" != 'ok' ]; do

        ## acquire host fqdn
        read -p 'Enter host fqdn > ' HOST_FQDN

        ## acquire host ip
        read -p 'Enter host ip > ' HOST_IP

        ## verify submission
        echo "Your host's fqdn: $HOST_FQDN"
        echo "Your host's ip: $HOST_IP"
        read -p 'Is this correct (y) > ' CORRECT_HOST
    done

fi

## get hostname (ubuntu 14.04)
HOSTNAME=$(hostname)

## set proxy, conditionally set additional variables
##
## Note: only a vagrant implementation should have a private ssh key named
##       'puppetserver_vagrant.private'.
##
if ! exists /vagrant/.ssh/*_vagrant.private; then

    ## local variables
    CORRECT_PROXY='n'
    PROXY_IP='null'
    PROXY_PORT='null'

    ## prompt proxy configurations
    while [ "${CORRECT_PROXY,,}" != 'y' ] && \
        [ "${CORRECT_PROXY,,}" != 'yes' ] && \
        [ "${CORRECT_PROXY,,}" != 'true' ] && \
        [ "${CORRECT_PROXY,,}" != 'ok' ]; do

        ## verify submission
        echo "Your proxy: $PROXY_IP:$PROXY_PORT"
        read -p 'Is this correct (y) > ' CORRECT_PROXY

        if [ "${CORRECT_PROXY,,}" == 'y' ] || \
        [ "${CORRECT_PROXY,,}" == 'yes' ] || \
        [ "${CORRECT_PROXY,,}" == 'true' ] || \
        [ "${CORRECT_PROXY,,}" == 'ok' ]; then
            break
        fi

        ## acquire proxy ip
        read -p 'Enter your proxy ip > ' PROXY_IP

        ## acquire proxy port
        read -p 'Enter your proxy port > ' PROXY_PORT
    done

    ## setup proxy: lasts until reboot
    export http_proxy=http://"$PROXY_IP:$PROXY_PORT"
    export https_proxy=https://"$PROXY_IP:$PROXY_PORT"

    ## setup proxy: persistent after reboot
    sudo sh -c "echo \"http_proxy=http://$PROXY_IP:$PROXY_PORT\" >> /etc/environment"
    sudo sh -c "echo \"https_proxy=https://$PROXY_IP:$PROXY_PORT\" >> /etc/environment"

fi

## add puppet to path
export PATH=$PATH:/opt/puppetlabs/bin/puppet
source ~/.bashrc

## disable nullglob
shopt -u nullglob

## enable puppet repository (ubuntu 14.04)
wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb
sudo dpkg -i puppetlabs-release-pc1-trusty.deb
sudo apt-get update
echo 'Puppet package repository enabled.'

## install puppetagent
sudo apt-get install -y puppet-agent
rm -rf puppetlabs-release-pc1-trusty.deb*
echo 'Puppet agent installed.'

## get ip address
while IFS=' /' read -r _ dev _ ip _; do
    [[ $dev == en* ]] || [[ $dev == eth* ]] || continue
    IP_ADDRESS="$ip"
done < <(ip -o -4 addr show)

## define puppet environment
if [[ $IP_ADDRESS == $VAGRANT_IP ]]; then
    PUPPET_ENVIRONMENT='trusty64'
else
    echo "please execute 'puppet config set environment YOUR-ENVIRONMENT'"
    PUPPET_ENVIRONMENT='unknown'
fi

## assign puppet agent configuration
if [ "$PUPPET_ENVIRONMENT" != 'unknown' ]; then

    ## create puppet environment directory
    sudo mkdir -p "/etc/puppetlabs/code/environments/$PUPPET_ENVIRONMENT"
    sudo chown vagrant:root "/etc/puppetlabs/code/environments/$PUPPET_ENVIRONMENT"

    ## set puppet environment (ubuntu 14.04)
    sudo /opt/puppetlabs/bin/puppet config set environment "$PUPPET_ENVIRONMENT"

else

    ## local variables
    CORRECT_ENVIRONMENT='n'

    ## prompt proxy configurations
    while [ "${CORRECT_ENVIRONMENT,,}" != 'y' ] && \
        [ "${CORRECT_ENVIRONMENT,,}" != 'yes' ] && \
        [ "${CORRECT_ENVIRONMENT,,}" != 'true' ] && \
        [ "${CORRECT_ENVIRONMENT,,}" != 'ok' ]; do

        ## acquire host fqdn
        read -p 'Name of your puppet environment > ' PUPPET_ENVIRONMENT

        ## verify submission
        echo "Your puppet environment: $PUPPET_ENVIRONMENT"
        read -p 'Is this correct (y) > ' CORRECT_ENVIRONMENT
    done

    ## create puppet environment directory
    sudo mkdir -p "/etc/puppetlabs/code/environments/$PUPPET_ENVIRONMENT"
    sudo chown vagrant:root "/etc/puppetlabs/code/environments/$PUPPET_ENVIRONMENT"

    ## set puppet environment (ubuntu 14.04)
    sudo /opt/puppetlabs/bin/puppet config set environment "$PUPPET_ENVIRONMENT"

fi

## default search domain
if exists /vagrant/.ssh/*_vagrant.private; then
    sudo sh -c "echo 'search foreman.sandbox.local' >> /etc/resolv.conf"
    LOCAL_FQDN="$HOSTNAME".foreman.sandbox.local
else
    LOCAL_FQDN="$HOSTNAME"
fi

## append local fqdn
sudo sh -c "sed -i \"/127.0.0.1/s/$/	$LOCAL_FQDN/\" /etc/hosts"
sudo sh -c "sed -i \"/127.0.1.1/s/$/	$LOCAL_FQDN/\" /etc/hosts"

# add reference to puppetserver
printf '%s %s\n' "$HOST_IP" "$HOST_FQDN" | sudo tee -a /etc/hosts
sudo ifdown eth0 && sudo ifup eth0

## assign puppet agent configuration (ubuntu 14.04)
sudo /opt/puppetlabs/bin/puppet config set server "$HOST_FQDN"
sudo /opt/puppetlabs/bin/puppet config set certname "$LOCAL_FQDN"

## prevent ssl collision
##
## Note: sometimes when ssl certificates exists, errors prevent puppetagents
##       from connecting with the puppetserver.
##
if [ -f /etc/puppetlabs/puppet/ssl ]; then
    sudo mv /etc/puppetlabs/puppet/ssl /etc/puppetlabs/puppet/ssl.bk
fi

## enable nullglob
shopt -s nullglob

## reboot to apply above changes
##
## Note: only a vagrant implementation should have a private ssh key named
##       'puppetagent_vagrant.private'.
##
if ! exists /vagrant/.ssh/*_vagrant.private; then
    sudo reboot
fi

## disable nullglob
shopt -u nullglob